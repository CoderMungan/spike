//    \\ SPIKE: Secure your secrets with SPIFFE.
//  \\\\\ Copyright 2024-present SPIKE contributors.
// \\\\\\\ SPDX-License-Identifier: Apache-2.0

--------------------------------------------------------------------------------

## DRAFTS

This is a random place to dump anything that can be improved, re-used, re-enabled.
Think of this as the River of Styx; where things go to be reborn.

--------------------------------------------------------------------------------

SHAMIR

// Create a new group (using ed25519 as an example)
g := ed25519.NewGroup()

// Create a secret value (for example purposes, we'll use a random scalar)
secret := g.RandomScalar(rand.Reader)

// Parameters for the secret sharing scheme:
// t = 2: need 3 shares to reconstruct (threshold + 1)
// n = 5: total number of shares to create
threshold := uint(2)
numShares := uint(5)

// Create a new secret sharing instance
ss := New(rand.Reader, threshold, secret)

// Generate n shares
shares := ss.Share(numShares)

// Optional: Create a commitment to verify shares later
commitment := ss.CommitSecret()

fmt.Printf("Created %d shares with threshold %d\n", numShares, threshold)
for i, share := range shares {
// Verify each share against the commitment
isValid := Verify(threshold, share, commitment)
fmt.Printf("Share %d: Valid=%v\n", i+1, isValid)
}

// Simulate recovering the secret with different subsets of shares

// Try with insufficient shares (should fail)
insufficientShares := shares[:2]
recoveredSecret, err := Recover(threshold, insufficientShares)
if err != nil {
fmt.Printf("Expected error with insufficient shares: %v\n", err)
}

// Try with sufficient shares (should succeed)
sufficientShares := shares[:3]
recoveredSecret, err = Recover(threshold, sufficientShares)
if err != nil {
log.Fatalf("Unexpected error: %v", err)
}

// Verify the recovered secret matches the original
if recoveredSecret.IsEqual(secret) {
fmt.Println("Successfully recovered the secret!")
} else {
fmt.Println("Error: Recovered secret does not match original!")
}

// You can also create shares with specific IDs
customID := g.NewScalar().SetUint64(42)
customShare := ss.ShareWithID(customID)
isValid := Verify(threshold, customShare, commitment)
fmt.Printf("Custom share with ID 42: Valid=%v\n", isValid)

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------

POLICY API SPECIFICATION

/v1/acl/policies:
  post:
    description: Create a new access policy
    request:
      body:
        policy_name: string
        spiffe_id_pattern: string  # Supports regex/prefix matching
        path_pattern: string       # Supports glob patterns
        permissions:
          - read
          - list
        metadata:
          created_by: string
          created_at: timestamp
    response:
      policy_id: string
      status: string

  get:
    description: List all policies
    response:
      policies:
        - policy_id: string
          policy_name: string
          spiffe_id_pattern: string
          path_pattern: string
          permissions: [string]
          metadata:
            created_by: string
            created_at: timestamp
            last_modified: timestamp

/v1/acl/policies/{policy_id}:
  get:
    description: Get specific policy details
  delete:
    description: Remove a policy
  put:
    description: Update a policy

# Policy Evaluation API (for internal use)
/v1/acl/check:
  post:
    description: Check if a SPIFFE ID has access to a path
    request:
      spiffe_id: string
      path: string
      action: string  # read/list
    response:
      allowed: boolean
      matching_policies: [string]  # List of policy IDs that granted access

# Example Policy Document
example_policy:
  policy_name: "web-servers-secrets"
  spiffe_id_pattern: "spiffe://example.org/web-server/*"
  path_pattern: "secrets/web/*"
  permissions:
    - read
    - list
  metadata:
    created_by: "admin@example.org"
    created_at: "2024-11-16T10:00:00Z"

--------------------------------------------------------------------------------

Audit Trail:

All actions are logged with timestamps and acting admin
Tracks who created each admin
Logs password resets and backup assignments

-----

Issue management:
* This is a tiny project; so it does not need a big fat issue manager.
  even a `to_do.txt` with every line in priority order is a good enough way
  to manage things.
* The development team (me, Volkan, initially) will use `to do` labels liberally
  to designate what to do where in the project.
* GitHub issues will be created on a "per need" basis.
* Also the community will be encouraged to create GitHub issues, yet it won't
  be the team's main way to define issues or roadmap.
* I believe this unorthodox way will provide agility.
* For documentation versions, redirect to tagged github snapshots.
======

