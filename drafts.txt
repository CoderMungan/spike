//    \\ SPIKE: Secure your secrets with SPIFFE.
//  \\\\\ Copyright 2024-present SPIKE contributors.
// \\\\\\\ SPDX-License-Identifier: Apache-2.0

--------------------------------------------------------------------------------

// File: server/types.go
package server

import (
    "time"
)







// File: server/acl_service.go
package server

import (
    "context"
    "encoding/json"
    "fmt"
    "net/http"
    "path"
    "regexp"
    "sync"

    "github.com/google/uuid"
    "github.com/gorilla/mux"
)

type ACLService struct {
    policies sync.Map
}

func NewACLService() *ACLService {
    return &ACLService{}
}

func (s *ACLService) RegisterRoutes(r *mux.Router) {
    r.HandleFunc("/v1/store/acl/policies", s.CreatePolicy).Methods("POST")
    r.HandleFunc("/v1/store/acl/policies", s.ListPolicies).Methods("GET")
    r.HandleFunc("/v1/store/acl/policies/{id}", s.GetPolicy).Methods("GET")
    r.HandleFunc("/v1/store/acl/policies/{id}", s.DeletePolicy).Methods("DELETE")
    r.HandleFunc("/v1/store/acl/check", s.CheckAccess).Methods("POST")
}

func (s *ACLService) CreatePolicy(w http.ResponseWriter, r *http.Request) {
    var req CreatePolicyRequest
    if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
        http.Error(w, err.Error(), http.StatusBadRequest)
        return
    }

    // Validate policy
    if _, err := regexp.Compile(req.SpiffeIdPattern); err != nil {
        http.Error(w, "invalid spiffe_id_pattern", http.StatusBadRequest)
        return
    }

    policy := &Policy{
        ID:              uuid.New().String(),
        Name:            req.Name,
        SpiffeIdPattern: req.SpiffeIdPattern,
        PathPattern:     req.PathPattern,
        Permissions:     req.Permissions,
        CreatedAt:       time.Now(),
        CreatedBy:       r.Header.Get("X-User-ID"), // Assuming auth middleware sets this
    }

    s.policies.Store(policy.ID, policy)

    w.WriteHeader(http.StatusCreated)
    json.NewEncoder(w).Encode(policy)
}


# ## A note for Mac OS users ##
#
# The SPIRE Unix Workload Attestor plugin generates selectors based on
# Unix-specific attributes of workloads.
#
# On Darwin (macOS), the following selectors are supported:
# * unix:uid: The user ID of the workload (e.g., unix:uid:1000).
# * unix:user: The username of the workload (e.g., unix:user:nginx).
# * unix:gid: The group ID of the workload (e.g., unix:gid:1000).
# * unix:group: The group name of the workload (e.g., unix:group:www-data).
#
# However, the following selectors are not supported on Darwin:
# * unix:supplementary_gid: The supplementary group ID of the workload.
# * unix:supplementary_group: The supplementary group name of the workload.
#
# ^ These selectors are currently only supported on Linux systems.
#
# Additionally, if the plugin is configured with discover_workload_path = true,
# it can provide these selectors:
# * unix:path: The path to the workload binary (e.g., unix:path:/usr/bin/nginx).
# * unix:sha256: The SHA256 digest of the workload binary (e.g., unix:sha256:3a6...).

func (s *ACLService) CheckAccess(w http.ResponseWriter, r *http.Request) {
    var req CheckAccessRequest
    if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
        http.Error(w, err.Error(), http.StatusBadRequest)
        return
    }

    matchingPolicies := []string{}
    allowed := false

    s.policies.Range(func(key, value interface{}) bool {
        policy := value.(*Policy)

        // Check if SPIFFE ID matches pattern
        matched, err := regexp.MatchString(policy.SpiffeIdPattern, req.SpiffeID)
        if err != nil || !matched {
            return true // continue iteration
        }

        // Check if path matches pattern
        if matched, _ := path.Match(policy.PathPattern, req.Path); !matched {
            return true
        }

        // Check if action is allowed
        for _, perm := range policy.Permissions {
            if perm == req.Action {
                matchingPolicies = append(matchingPolicies, policy.ID)
                allowed = true
                break
            }
        }

        return true
    })

    json.NewEncoder(w).Encode(CheckAccessResponse{
        Allowed:          allowed,
        MatchingPolicies: matchingPolicies,
    })
}

// Other handlers (ListPolicies, GetPolicy, DeletePolicy) omitted for brevity

--------------------------------------------------------------------------------

// File: client/acl_client.go
package client

import (
    "bytes"
    "context"
    "encoding/json"
    "fmt"
    "net/http"
    "time"
)

type ACLClient struct {
    baseURL    string
    httpClient *http.Client
}

func NewACLClient(baseURL string) *ACLClient {
    return &ACLClient{
        baseURL: baseURL,
        httpClient: &http.Client{
            Timeout: 30 * time.Second,
        },
    }
}

func (c *ACLClient) CreatePolicy(ctx context.Context, req CreatePolicyRequest) (*Policy, error) {
    body, err := json.Marshal(req)
    if err != nil {
        return nil, fmt.Errorf("marshaling request: %w", err)
    }

    httpReq, err := http.NewRequestWithContext(
        ctx,
        "POST",
        fmt.Sprintf("%s/v1/store/acl/policies", c.baseURL),
        bytes.NewReader(body),
    )
    if err != nil {
        return nil, fmt.Errorf("creating request: %w", err)
    }

    httpResp, err := c.httpClient.Do(httpReq)
    if err != nil {
        return nil, fmt.Errorf("sending request: %w", err)
    }
    defer httpResp.Body.Close()

    if httpResp.StatusCode != http.StatusCreated {
        return nil, fmt.Errorf("unexpected status: %d", httpResp.StatusCode)
    }

    var policy Policy
    if err := json.NewDecoder(httpResp.Body).Decode(&policy); err != nil {
        return nil, fmt.Errorf("decoding response: %w", err)
    }

    return &policy, nil
}

func (c *ACLClient) CheckAccess(ctx context.Context, spiffeID, path, action string) (*CheckAccessResponse, error) {
    req := CheckAccessRequest{
        SpiffeID: spiffeID,
        Path:     path,
        Action:   action,
    }

    body, err := json.Marshal(req)
    if err != nil {
        return nil, fmt.Errorf("marshaling request: %w", err)
    }

    httpReq, err := http.NewRequestWithContext(
        ctx,
        "POST",
        fmt.Sprintf("%s/v1/store/acl/check", c.baseURL),
        bytes.NewReader(body),
    )
    if err != nil {
        return nil, fmt.Errorf("creating request: %w", err)
    }

    httpResp, err := c.httpClient.Do(httpReq)
    if err != nil {
        return nil, fmt.Errorf("sending request: %w", err)
    }
    defer httpResp.Body.Close()

    if httpResp.StatusCode != http.StatusOK {
        return nil, fmt.Errorf("unexpected status: %d", httpResp.StatusCode)
    }

    var resp CheckAccessResponse
    if err := json.NewDecoder(httpResp.Body).Decode(&resp); err != nil {
        return nil, fmt.Errorf("decoding response: %w", err)
    }

    return &resp, nil
}

// Example usage:
func Example() {
    client := NewACLClient("http://localhost:8080")
    ctx := context.Background()

    // Create a policy
    policy, err := client.CreatePolicy(ctx, CreatePolicyRequest{
        Name:            "web-servers",
        SpiffeIdPattern: "spiffe://example.org/web-server/.*",
        PathPattern:     "secrets/web/*",
        Permissions:     []string{"read", "list"},
    })
    if err != nil {
        panic(err)
    }

    // Check access
    resp, err := client.CheckAccess(ctx,
        "spiffe://example.org/web-server/001",
        "secrets/web/config",
        "read",
    )
    if err != nil {
        panic(err)
    }

    fmt.Printf("Access allowed: %v\n", resp.Allowed)
    fmt.Printf("Matching policies: %v\n", resp.MatchingPolicies)
}




--------------------------------------------------------------------------------

## DRAFTS

This is a random place to dump anything that can be improved, re-used, re-enabled.
Think of this as the River of Styx; where things go to be reborn.

--------------------------------------------------------------------------------

SHAMIR

// Create a new group (using ed25519 as an example)
g := ed25519.NewGroup(acl/policies:
  post:
    description: Create a new access policy
    request:
      body:
        policy_name: string
        spiffe_id_pattern: string  # Supports regex/prefix matching
        path_pattern: string       # Supports glob patterns
        permissions:
          - read
          - list
        metadata:
          created_by: string
          created_at: timestamp
    response:
      policy_id: string
      status: string

  get:
    description: List all policies
    response:
      policies:
        - policy_id: string
          policy_name: string
          spiffe_id_pattern: string
          path_pattern: string
          permissions: [string]
          metadata:
            created_by: string
            created_at: timestamp
            last_modified: timestamp

/v1/acl/policies/{policy_id}:
  get:
    description: Get specific policy details
  delete:
    description: Remove a policy
  put:
    description: Update a policy

# Policy Evaluation API (for internal use)
/v1/acl/check:
  post:
    description: Check if a SPIFFE ID has access to a path
    request:
      spiffe_id: string
      path: string
      action: string  # read/list
    response:
      allowed: boolean
      matching_policies: [string]  # List of policy IDs that granted access

# Example Policy Document
example_policy:
  policy_name: "web-servers-secrets"
  spiffe_id_pattern: "spiffe://example.org/web-server/*"
  path_pattern: "secrets/web/*"
  permissions:
    - read
    - list
  metadata:
    created_by: "admin@example.org"
    created_at: "2024-11-16T10:00:00Z"

--------------------------------------------------------------------------------

Audit Trail:

All actions are logged with timestamps and acting admin
Tracks who created each admin
Logs password resets and backup assignments

-----

Issue management:
* This is a tiny project; so it does not need a big fat issue manager.
  even a `to_do.txt` with every line in priority order is a good enough way
  to manage things.
* The development team (me, Volkan, initially) will use `to do` labels liberally
  to designate what to do where in the project.
* GitHub issues will be created on a "per need" basis.
* Also the community will be encouraged to create GitHub issues, yet it won't
  be the team's main way to define issues or roadmap.
* I believe this unorthodox way will provide agility.
* For documentation versions, redirect to tagged github snapshots.
======

