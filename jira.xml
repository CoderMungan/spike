<?xml version="1.0" encoding="utf-8" ?>
<!--
#    \\ SPIKE: Secure your secrets with SPIFFE.
#  \\\\\ Copyright 2024-present SPIKE contributors.
# \\\\\\\ SPDX-License-Identifier: Apache-2.0
-->
<stuff>
<purpose>
- Our goal is to have a minimally delightful product.
- Strive not to add features just for the sake of adding features.
- If there are half-complete features, missing tests, and the like, they should
  be completed before adding more features.
</purpose>
<low-hanging-fruits>
	<issue>
	</issue>
</low-hanging-fruits>
<immediate-backlog>
	<issue>
		new initialization flow with password request from the superadmin.
	</issue>
	<issue>
		mode for keeperless operation (fore development maybe).
	</issue>
	<issue>
		If there is a backing store, load all secrets from the backing store
		upon crash, which will also populate the key list.
	</issue>
	<issue>
		cross compilation will need a dedicated user story:
		can be done on an M3 mac; but will require some boilerplate.
		# Linux ARM64
		CGO_ENABLED=0 GOEXPERIMENT=boringcrypto go build -o keeper ./app/keeper/cmd/main.go
		CGO_ENABLED=1 GOEXPERIMENT=boringcrypto go build -o nexus ./app/nexus/cmd/main.go
		CGO_ENABLED=0 GOEXPERIMENT=boringcrypto go build -o spike ./app/spike/cmd/main.go
	</issue>
	<issue>
		Kubernetification
	</issue>
</immediate-backlog>
<runner-up>
	<issue>
	implement exponential retries.
	</issue>
	<issue>
		Charts for the current db backing store.
	</issue>
	<issue>
	make sure that everything sanitizable are properly sanitized.
	</issue>
	<issue>
	Algorithm change in `spike get` (instead of verifying the admin token,
	use short-lived token you get from SPIKE Nexus)
	</issue>
	<issue>
	`const urlSecretPut = "https://localhost:8553/v1/secrets"` ->
	these should be configurable.
	</issue>
	<issue>
	state.SetAdminToken(adminToken) // This is temporary, for demo. Update it based on new sequence diagrams.
	adminToken := req.Data // admin token will be auto created, we just need a strong password, and sanitize that password
	</issue>
</runner-up>
<backlog>
	<issue>
		UndeleteSecret (and maybe other methods too) should return an error:
		```
		func UndeleteSecret(path string, versions []int) {
		kvMu.Lock()
		defer kvMu.Unlock()

		err := kv.Undelete(path, versions)
		if err != nil {
		return
		}
		}
		```
	</issue>
	<issue>
	Do some static analysis.
	</issue>
	<issue>
	create community and contact pages.
	</issue>
	<issue>
	Add correlation id to logs where there is context.
	</issue>
	<issue>
	for a proper audit these paths should return an error and the auditor should
	log unsuccessful cases
		<!--
		case m == http.MethodPost && a == "" && p == urlKeep:
		return routeKeep
		-->
	</issue>
	<issue>
	Create secret metadata API.
	</issue>
	<issue>
	Maybe move the kv store, and the logger to a `pkg` folder instead of
	`internal` because they are reusable as they are in isolation.
	</issue>
	<issue>
	Have a way to clean up outdated session tokens to avoid memory leaks.
	</issue>
	<issue>
	Implement an S3 (or compatible) backing store.
	</issue>
</backlog>
<after-login-flow-fully-implemented>
	<issue>
	Secret metadata API.
	</issue>
	<issue>
	- SPIKE Nexus Sanity Tests
		- Ensure SPIKE Nexus caches the root key in memory.
		- Ensure SPIKE Nexus reads from SPIKE keep if it does not have the root key.
		- Ensure SPIKE Nexus saves the encrypted root key to the database.
		- Ensure SPIKE Nexus caches the user's session key.
		- Ensure SPIKE Nexus removes outdated session keys.
		- Ensure SPIKE Nexus does not re-init (without manual intervention) after
		being initialized.
		- Ensure SPIKE Nexus adheres to the bootstrapping sequence diagram.
		- Ensure SPIKE Nexus backs up the admin token by encrypting it with the root
		key and storing in the database.
		- Ensure SPIKE Nexus stores the initialization tombstone in the database.
	</issue>
	<issue>
	- SPIKE Pilot Sanity Tests
		- Ensure SPIKE Pilot denies any operation if SPIKE Nexus is not initialized.
		- Ensure SPIKE Pilot can warn if SPIKE Nexus is unreachable
		- Ensure SPIKE Pilot does not indefinitely hang up if SPIRE is not there.
		- Ensure SPIKE Pilot can get and set a secret.
		- Ensure SPIKE Pilot can do a force reset.
		- Ensure SPIKE Pilot can recover the root password.
		- Ensure that after `spike init` you have a password-encrypted root key in the db.
		- Ensure that you can recover the password-encrypted root key.
	</issue>
	<issue>
	- SPIKE Keep Sanity Tests
		- Ensure that the root key is stored in SPIKE Keep's memory.
		- Ensure that SPIKE Keep can return the root key back to SPIKE Nexus.
	</issue>
	<issue>
	Consider a health check / heartbeat between Nexus and Keeper.
	This can be more frequent than the root key sync interval.
	</issue>
	<issue>
	Unit tests and coverage reports.
	</issue>
	<issue>
	Integration tests.
	</issue>
	<issue>
	Test automation.
	</issue>
	<issue>
	Assigning secrets to SPIFFE IDs or SPIFFE ID prefixes.
	</issue>
	<issue>
	RW policies for workloads baesd on path and SPIFFE IDs.
	(or maybe experiment with S3 policies before reinventing a policy engine)
	</issue>
</after-login-flow-fully-implemented>
<to-plan>
	<issue>
	S3 (or compatible) backing store
	</issue>
	<issue>
	File-based backing store
	</issue>
	<issue>
	In memory backing store
	</issue>
	<issue>
	Kubernetes Deployment
	</issue>
</to-plan>
<future>
	<issue>
	- Security Measures (SPIKE Nexus)
		- Encrypting the root key with admin password is good
		Consider adding salt to the password encryption
		- Maybe add a key rotation mechanism for the future
	</issue>
	<issue>
	- Error Handling
		- Good use of exponential retries
		- Consider adding specific error types/codes for different failure scenarios
		- Might want to add cleanup steps for partial initialization failures
	</issue>
	<issue>
	Ability to stream logs and audit trails outside of std out.
	</issue>
	<issue>
	Audit logs should write to a separate location.
	</issue>
	<issue>
	Create a dedicated OIDC resource server (that acts like Pilot but exposes a
	restful API for things like CI/CD integration.
	</issue>
	<issue>
	HSM integration (i.e. root key is managed/provided by an HSM, and the key
	ever leaves the trust boundary of the HSM.
	</issue>
	<issue>
	double-encryption of nexus-keeper comms (in case mTLS gets compromised, or
	SPIRE is configured to use an upstream authority that is compromised, this
	will provide end-to-end encryption and an additional layer of security over
	the existing PKI)
	</issue>
	<issue>
	Ability to rotate the root key (automatic via Nexus).
	</issue>
	<issue>
	Ability to rotate the admin token (manual).
	</issue>
	<issue>
	Admin tokens can expire.
	</issue>
	<issue>
	Encourage to create users instead of relying on the system user.
	</issue>
</future>
</stuff>