#    \\ SPIKE: Secure your secrets with SPIFFE.
#  \\\\\ Copyright 2024-present SPIKE contributors.
# \\\\\\\ SPDX-License-Identifier: Apache-2.0

--------------------------=| LOW-HANGING FRUITS |=------------------------------

- ticker := time.NewTicker(10 * time.Second) // for now; will be configurable.
- MaxVersions:    3: should be configurable.
- SPIKE Nexus Root Key Provisioning and Recovery
  sequence diagram issue: create root key if not exist; also check Keep before creating the key.
- Add correlation id to logs where there is context.
- Log any api interaction anywhere.
- Algorithm change in `spike get` (instead of verifying the admin token, use short-lived token you get from SPIKE Nexus)
- `if len(args) > 3 && strings.HasPrefix(args[3], "-version=") {`: parsing CLI is getting cumbersome; use cobra.
- `const urlSecretPut = "https://localhost:8553/v1/secrets"` -> these should be configurable.
- if `spike init` is called while nexus is not ready; spike thinks it's initialized and will not re-init.
- the website needs a footer.
- the repo needs COC and other related documents.
- There are rendering issues on some of the charts on the docs website.

---------------------------=| PRIORITIZED BACKLOG |=----------------------------

implement:
  delete
  list
  undelete

bug: if keeper not there nexus crashes without attempting to retry
aegis@aegis:~/Desktop/WORKSPACE/spike$ ./nexus
2024/11/05 08:31:20 Unable to initialize state: FetchFromCache: failed to unmarshal response: unexpected end of JSON input



check all handlers; some of them prematurely set w.WriteHeader(http.StatusOK)

BUG
aegis@aegis:~/Desktop/WORKSPACE/spike$ spike get /secrets/main
######## GET SESSION TOKENS INSTEAD #######
Error reading secret: getSecret: Problem parsing response body
unexpected end of JSON input


- spike init should ask for db details too.
(if backing store is in-memory, it won't ask db details)
    spike init
    db username (postgres):
    db host:
    db password:
    ^ save the connection string in memory
    ^ save the connection string in keep too, as part of the initial secret.

- Finalize the in-memory backing store first, before using postgres.
  in-memory backing store could be useful for development where you won't
  have to deploy postgres just to test things out.
  disadvantage? if nexus crashes, all secrets will be gone.

- state.SetAdminToken(adminToken) // This is temporary, for demo. Update it based on new sequence diagrams.
- adminToken := req.Data // admin token will be auto created, we just need a strong password, and sanitize that password

- do some static analysis (once the minimally viable feature set reaches near completion)

- Missing Endpoints to Implement
  - app/keeper/internal/route/keep.go

- BUG: Re-initing after failed initialization return success.
  aegis@aegis:~/Desktop/WORKSPACE/spike$ spike init
  Failed to save admin token:
  failed to save token to nexus
  Post "https://localhost:8553/v1/init": dial tcp 127.0.0.1:8553: connect: connection refused.
  post: Problem connecting to peer
  aegis@aegis:~/Desktop/WORKSPACE/spike$ spike init
  SPIKE is already initialized.
  Nothing to do.

- Immediate Backlog
  - Fix visible bugs.
  - Refactor reqres entities to one level higher.
  - Source code cleanup.
  - generate some sequence diagrams before it's too late.
  - Create a documentation website.
  - Have a way to clean up outdated session tokens to avoid memory leaks.

- Create a demo video when the KV is fully implemented.

- KeyValue Store
  - Modify it to back up secrets in the database too.

- Feat: Soft Deletes
  POST /v1/secrets?action=delete

- Feat: Undelete (versions)

- Feat: List
  POST /v1/secrets

- SPIKE Nexus Sanity Tests
  - Ensure SPIKE Nexus caches the root key in memory.
  - Ensure SPIKE Nexus reads from SPIKE keep if it does not have the root key.
  - Ensure SPIKE Nexus saves the encrypted root key to the database.
  - Ensure SPIKE Nexus caches the user's session key.
  - Ensure SPIKE Nexus removes outdated session keys.
  - Ensure SPIKE Nexus does not re-init (without manual intervention) after
    being initialized.
  - Ensure SPIKE Nexus adheres to the bootstrapping sequence diagram.
  - Ensure SPIKE Nexus backs up the admin token by encrypting it with the root
    key and storing in the database.
  - Ensure SPIKE Nexus stores the initialization tombstone in the database.

- SPIKE Pilot Sanity Tests
  - Ensure SPIKE Pilot denies any operation if SPIKE Nexus is not initialized.
  - Ensure SPIKE Pilot can warn if SPIKE Nexus is unreachable
  - Ensure SPIKE Pilot does not indefinitely hang up if SPIRE is not there.
  - Ensure SPIKE Pilot can get and set a secret.
  - Ensure SPIKE Pilot can do a force reset.
  - Ensure SPIKE Pilot can recover the root password.
  - Ensure that after `spike init` you have a password-encrypted root key in the db.
  - Ensure that you can recover the password-encrypted root key.

- SPIKE Keep Sanity Tests
  - Ensure that the root key is stored in SPIKE Keep's memory.
  - Ensure that SPIKE Keep can return the root key back to SPIKE Nexus.

---------------------- AFTER THIS POINT IS FAR FUTURE --------------------------

- use a structured logger with log levels.

- Create a dedicated OIDC resource server (that acts like Pilot but exposes a
  restful API for things like CI/CD integration.

* HSM integration (i.e. root key is managed/provided by an HSM, and the key
  never leaves the trust boundary of the HSM.

* double-encryption of nexus-keeper comms (in case mTLS gets compromised, or
  SPIRE is configured to use an upstream authority that is compromised, this
  will provide end-to-end encryption and an additional layer of security over
  the existing PKI)

Our goal is to have a minimally delightful product before adding more features.
Anything that comes after the line above shall be done when everything (or
the majority of things, at least) have been completed above already.

- Ability to rotate the root key (automatic via Nexus).
- Ability to rotate the admin token (manual).
- Admin tokens can expire.
- Encourage to create users for auditing instead of relying on the s

- Security Measures (SPIKE Nexus)
  - Encrypting the root key with admin password is good
    Consider adding salt to the password encryption
  - Maybe add a key rotation mechanism for the future
  - Error Handling
    - Good use of exponential retries
    - Consider adding specific error types/codes for different failure scenarios
    - Might want to add cleanup steps for partial initialization failures
  - Redundancy
    - Good that we cache the root key in Keeper
    - Consider adding a health check between Nexus and Keeper

- Unit tests and coverage reports.
- Integration tests.
- Test automation.
- Assigning secrets to SPIFFE IDs or SPIFFE ID prefixes.
- RW policies for workloads based on path and SPIFFE IDs.
- Secret metadata API.
