name: Build and Push to Docker Hub

on:
  release:
    types: [published]

env:
  REGISTRY: docker.io
  REPOSITORY: getspike
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  COSIGN_EXPERIMENTAL: 1
  DOCKER_CONTENT_TRUST: 1

jobs:
  docker:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: [pilot, keeper, nexus]
        arch: [linux/amd64, linux/arm64]
    permissions:
      contents: read
      packages: write
      id-token: write # needed for signing the images with GitHub OIDC Token

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.release.tag_name }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install cosign
        uses: sigstore/cosign-installer@v3.3.0

      # Login to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/${{ matrix.app }}
          tags: |
            type=semver,pattern={{version}}-${{ matrix.arch }},value=${{ github.event.release.tag_name }}
            type=semver,pattern={{major}}.{{minor}}-${{ matrix.arch }},value=${{ github.event.release.tag_name }}
            type=raw,value=latest-${{ matrix.arch }}
            type=sha-${{ matrix.arch }}
            ${{ matrix.arch == 'linux/amd64' && 'type=raw,value=latest' || '' }}
        # example tags in order: 1.2.3-linux/amd64, 1.2-linux/amd64, latest-linux/amd64, sha-1234567890(git commit sha)
        # if arch is linux/amd64, then add latest tag

      # Build and load Docker image
      - name: Build and load
        uses: docker/build-push-action@v5
        id: build-and-load
        with:
          context: .
          file: k8s/dockerfiles/${{ matrix.app }}.Dockerfile
          platforms: ${{ matrix.arch }}
          load: true
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: mode=max

      - name: Push to Docker Hub
        env:
          DOCKER_CONTENT_TRUST_REPOSITORY_PASSPHRASE: ${{ secrets.DCT_DELEGATION_PASSPHRASE }}
          DOCKER_CONTENT_TRUST: 1
        run: |
          for tag in $(echo "${{ steps.meta.outputs.tags }}"); do
            echo "Pushing tag: $tag"
            docker push "${{ env.REGISTRY }}/${{ env.REPOSITORY }}/${{ matrix.app }}:$tag"
          done
